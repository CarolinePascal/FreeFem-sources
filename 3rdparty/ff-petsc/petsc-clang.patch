diff --git a/config/BuildSystem/config/packages/hpddm.py b/config/BuildSystem/config/packages/hpddm.py
index 4a29f3a7f4e..5f0ade70884 100644
--- a/config/BuildSystem/config/packages/hpddm.py
+++ b/config/BuildSystem/config/packages/hpddm.py
@@ -66,8 +66,8 @@ class Configure(config.package.Package):
       if self.checkSharedLibrariesEnabled():
         slepcbuilddep = ''
         ldflags = ' '.join(self.setCompilers.sharedLibraryFlags)
-        cxxflags += ' '+self.headers.toStringNoDupes(self.dinclude+[os.path.join(PETSC_DIR,'include'),os.path.join(PETSC_DIR,PETSC_ARCH,'include')])
-        ldflags += ' '+self.libraries.toStringNoDupes(self.dlib)
+        cxxflags += ' '+self.headers.toStringNoDupes(self.dinclude+[os.path.join(PETSC_DIR,'include'),incDir])
+        ldflags += ' '+self.libraries.toStringNoDupes(self.dlib+[os.path.join(libDir,'libpetsc.'+self.setCompilers.sharedLibraryExt)])
         slepcbuilddep = 'slepc-install slepc-build'
         oldFlags = self.compilers.CXXPPFLAGS
         self.compilers.CXXPPFLAGS += ' -I'+incDir
@@ -76,8 +76,6 @@ class Configure(config.package.Package):
         # check for Windows-specific define
         if self.sharedLibraries.getMakeMacro('PETSC_DLL_EXPORTS'):
           cxxflags += ' -Dpetsc_EXPORTS'
-          # need to explicitly link to PETSc and BLAS on Windows
-          ldflags += ' '+self.libraries.toStringNoDupes([os.path.join(libDir,'libpetsc.'+self.setCompilers.sharedLibraryExt),self.libraries.toStringNoDupes(self.blasLapack.lib)])
         self.addMakeRule('hpddmbuild',slepcbuilddep,\
                            ['@echo "*** Building and installing HPDDM ***"',\
                             '@${RM} -f ${PETSC_ARCH}/lib/petsc/conf/hpddm.errorflg',\
diff --git a/src/ksp/ksp/impls/hpddm/hpddm.cxx b/src/ksp/ksp/impls/hpddm/hpddm.cxx
index 76369d82f95..61c57d5a12a 100644
--- a/src/ksp/ksp/impls/hpddm/hpddm.cxx
+++ b/src/ksp/ksp/impls/hpddm/hpddm.cxx
@@ -592,7 +592,7 @@ PETSC_EXTERN PetscErrorCode KSPCreate_HPDDM(KSP ksp) {
   PetscCall(PetscObjectComposeFunction((PetscObject)ksp, "KSPHPDDMGetDeflationMat_C", KSPHPDDMGetDeflationMat_HPDDM));
   PetscCall(PetscObjectComposeFunction((PetscObject)ksp, "KSPHPDDMSetType_C", KSPHPDDMSetType_HPDDM));
   PetscCall(PetscObjectComposeFunction((PetscObject)ksp, "KSPHPDDMGetType_C", KSPHPDDMGetType_HPDDM));
-#if defined(PETSC_HAVE_SLEPC) && defined(PETSC_USE_SHARED_LIBRARIES)
+#if defined(PETSC_HAVE_SLEPC) && PetscDefined(HAVE_DYNAMIC_LIBRARIES) && defined(PETSC_USE_SHARED_LIBRARIES)
   if (!loadedDL) PetscCall(HPDDMLoadDL_Private(&loadedDL));
 #endif
   data->precision = PETSC_KSPHPDDM_DEFAULT_PRECISION;
diff --git a/config/BuildSystem/config/framework.py b/config/BuildSystem/config/framework.py
index 4b0d1336558..4e884fe9a8a 100644
--- a/config/BuildSystem/config/framework.py
+++ b/config/BuildSystem/config/framework.py
@@ -563,6 +563,7 @@ class Framework(config.base.Configure, script.LanguageProcessor):
       lines = [s for s in lines if s.find(' was built for newer OSX version') < 0]
       lines = [s for s in lines if s.find(' stack subq instruction is too different from dwarf stack size') < 0]
       lines = [s for s in lines if s.find('could not create compact unwind') < 0]
+      lines = [s for s in lines if s.find('ld: warning: -undefined dynamic_lookup may not work with chained fixups') < 0]
       # Nvidia linker
       lines = [s for s in lines if s.find('nvhpc.ld contains output sections') < 0]
       # Intel dpcpp linker
